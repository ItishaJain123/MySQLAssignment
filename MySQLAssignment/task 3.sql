-- ///////////////////// Task 3. Aggregate functions, Having, Order By, GroupBy and Joins: ////////////////////////

-- NOTE = A JOIN clause is used to combine rows from two or more tables, based on a related column between them. 

-- 1. Write an SQL query to retrieve a list of all orders along with customer information (e.g.,
-- customer name) for each order.
		SELECT
			o.OrderID,
			o.OrderDate,
			c.CustomerID,
			c.FirstName,
            c.LastName,
			c.Email,
			c.Phone
		FROM Orders o 
        JOIN Customers c ON o.CustomerID = c.CustomerID;
		-- here I'm using JOIN to connect Customers and Orders tables based on CustomerID.


-- 2. Write an SQL query to find the total revenue generated by each electronic gadget product.
-- Include the product name and the total revenue.
		SELECT
			p.ProductName,
			SUM(od.Quantity * p.Price) AS TotalRevenue
		from OrderDetails od
		JOIN Products p ON od.ProductID = p.ProductID
		GROUP BY p.ProductName;
		-- total revenue is calculated by multiplying the quantity of goods sold by the price of the goods. 
            
            
-- 3. Write an SQL query to list all customers who have made at least one purchase. Include their
-- names and contact information.
		SELECT
			c.CustomerID,
			c.FirstName, 
            c.LastName,
			c.Email,
			c.Phone
		FROM Customers c
		JOIN Orders o ON c.CustomerID = o.CustomerID;


-- 4. Write an SQL query to find the most popular electronic gadget, which is the one with the highest
-- total quantity ordered. Include the product name and the total quantity ordered.
		SELECT
			p.ProductName,
			SUM(od.Quantity) AS TotalQuantityOrdered
		from OrderDetails od
		JOIN Products p ON od.ProductID = p.ProductID
		GROUP BY p.ProductName
		ORDER BY TotalQuantityOrdered DESC
		LIMIT 1;


-- 5. Write an SQL query to retrieve a list of electronic gadgets along with their corresponding
-- categories.
		SELECT
			p.ProductName,
			p.Descriptions AS ProductDescription,
			c.CategoryName
		FROM Products p
		JOIN Categories c ON p.CategoryID = c.CategoryID;


-- 6. Write an SQL query to calculate the average order value for each customer. Include the
-- customer's name and their average order value.
		SELECT
			c.CustomerID,
			CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
			AVG(o.TotalAmount) AS AverageOrderValue
		FROM
			Customers c
		JOIN
			Orders o ON c.CustomerID = o.CustomerID
		GROUP BY
			c.CustomerID;


-- 7. Write an SQL query to find the order with the highest total revenue. Include the order ID,
-- customer information, and the total revenue.
		SELECT
			o.OrderID,
			CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
			c.Email,
			c.Phone,
			SUM(od.Quantity * p.Price) AS TotalRevenue
		FROM
			Orders o
		JOIN
			Customers c ON o.CustomerID = c.CustomerID
		JOIN
			OrderDetails od ON o.OrderID = od.OrderID
		JOIN
			Products p ON od.ProductID = p.ProductID
		GROUP BY
			o.OrderID
		ORDER BY
			TotalRevenue DESC
		LIMIT 1;
        

-- 8. Write an SQL query to list electronic gadgets and the number of times each product has been
-- ordered.
-- Write an SQL query to list electronic gadgets and the number of times each product has been ordered.
		SELECT
			p.ProductName,
			COUNT(od.OrderDetailID) AS NumberOfOrders
		FROM
			Products p
		LEFT JOIN
			OrderDetails od ON p.ProductID = od.ProductID
		GROUP BY
			p.ProductName;
		-- Here I'm using LEFT JOIN to include products even if they haven't been ordered.


-- 9. Write an SQL query to find customers who have purchased a specific electronic gadget product.
-- Allow users to input the product name as a parameter.
		SELECT
			c.CustomerID,
			CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
			c.Email,
			c.Phone
		FROM
			Customers c
		JOIN
			Orders o ON c.CustomerID = o.CustomerID
		JOIN
			OrderDetails od ON o.OrderID = od.OrderID
		JOIN
			Products p ON od.ProductID = p.ProductID
		WHERE
			p.ProductName = @ProductNameToSearch;
    
    
-- 10. Write an SQL query to calculate the total revenue generated by all orders placed within a
-- specific time period. Allow users to input the start and end dates as parameters.
		SET @StartDate DATE = '2024-01-14';
		SET @EndDate DATE = '2024-01-18';

		SELECT
			SUM(o.TotalAmount) AS TotalRevenue
		FROM
			Orders o
		WHERE
			o.OrderDate BETWEEN @StartDate AND @EndDate;
		-- Here I'm using SET as this statements are used to assign values to variables before executing the subsequent query. 