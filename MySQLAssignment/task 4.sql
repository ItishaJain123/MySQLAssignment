-- ////////////////////////////// Task 4. Subquery and its type: /////////////////////////////////////

-- NOTE = A SUBQUERY is a query that appears inside another query statement.

-- 1. Write an SQL query to find out which customers have not placed any orders.
		SELECT
			c.CustomerID,
			CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
			c.Email,
			c.Phone
		FROM
			Customers c
		WHERE
			c.CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);
		-- Here I'm using NOT IN with a subquery to identify customers with no orders. 
        
        
-- 2. Write an SQL query to find the total number of products available for sale.
		select count(*) as TotalProducts 
        from Products;
        
			
-- 3. Write an SQL query to calculate the total revenue generated by TechShop.
		select sum(o.totalamount) as Totalrevenue 
        from Orders o;
        
        
-- 4. Write an SQL query to calculate the average quantity ordered for products in a specific category.
-- Allow users to input the category name as a parameter.
		select avg(od.quantity) as AverageQuantity 
        from OrderDetails as od 
        Join Products p on od.ProductID = p.ProductID;
        
        
-- 5. Write an SQL query to calculate the total revenue generated by a specific customer. Allow users
-- to input the customer ID as a parameter.
		SET @CustomerID = 1;
        SELECT
			SUM(o.TotalAmount) AS TotalRevenue
		FROM
			Orders o
		WHERE
			o.CustomerID = @CustomerID;

        
-- 6. Write an SQL query to find the customers who have placed the most orders. List their names
-- and the number of orders they've placed.
		SELECT
			c.CustomerID,
			CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
			COUNT(o.OrderID) AS NumberOfOrders
		FROM
			Customers c
		JOIN
			Orders o ON c.CustomerID = o.CustomerID
		GROUP BY
			c.CustomerID, c.FirstName, c.LastName
		ORDER BY
			NumberOfOrders DESC
		LIMIT 1;


-- 7. Write an SQL query to find the most popular product category, which is the one with the highest
-- total quantity ordered across all orders.
		SELECT
			c.CategoryName,
			SUM(od.Quantity) AS TotalQuantityOrdered
		FROM
			OrderDetails od
		JOIN
			Products p ON od.ProductID = p.ProductID
		ORDER BY
			TotalQuantityOrdered DESC;


-- 8. Write an SQL query to find the customer who has spent the most money (highest total revenue)
-- on electronic gadgets. List their name and total spending.
		SELECT
			c.CustomerID,
			CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
			SUM(o.TotalAmount) AS TotalSpending
		FROM
			Customers c
		JOIN
			Orders o ON c.CustomerID = o.CustomerID
		JOIN
			OrderDetails od ON o.OrderID = od.OrderID
		JOIN
			Products p ON od.ProductID = p.ProductID
		GROUP BY
			c.CustomerID, c.FirstName, c.LastName
		ORDER BY
			TotalSpending DESC;


-- 9. Write an SQL query to calculate the average order value (total revenue divided by the number of
-- orders) for all customers.
		SELECT
			c.CustomerID,
			CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
			AVG(o.TotalAmount) AS AverageOrderValue
		FROM
			Customers c
		JOIN
			Orders o ON c.CustomerID = o.CustomerID
		GROUP BY
			c.CustomerID, c.FirstName, c.LastName;

		-- ALT CODE:-
		SELECT
		c.CustomerID,
		CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
		(SELECT AVG(o.TotalAmount) FROM Orders o WHERE o.CustomerID = c.CustomerID) AS AverageOrderValue
		FROM Customers c;


-- 10. Write an SQL query to find the total number of orders placed by each customer and list their
-- names along with the order count.
		SELECT
			c.CustomerID,
			CONCAT(c.FirstName, ' ', c.LastName) AS CustomerName,
			COUNT(o.OrderID) AS OrderCount
		FROM
			Customers c
		LEFT JOIN
			Orders o ON c.CustomerID = o.CustomerID
		GROUP BY
			c.CustomerID, c.FirstName, c.LastName;

		